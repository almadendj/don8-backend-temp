// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  wallet        String         @unique
  username      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[] @relation("OrgOwner")
  donations     Donation[]
}

model Organization {
  id             String             @id @default(cuid())
  name           String
  description    String?
  walletAddress  String             @unique
  status         OrganizationStatus @default(PENDING)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now())
  ownerId        String?
  owner          User?              @relation("OrgOwner", fields: [ownerId], references: [id])
  donationDrives DonationDrive[]
}

model DonationDrive {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  description    String?

  title        String
  targetAmount Float
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime   @default(now())
  donations    Donation[]
  receipts     Receipt[]
}

model Donation {
  id      String        @id @default(cuid())
  drive   DonationDrive @relation(fields: [driveId], references: [id])
  driveId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  amount    Float
  txHash    String   @unique
  anonymous Boolean  @default(false)
  nickname  String?
  createdAt DateTime @default(now())
}

model Receipt {
  id      String        @id @default(cuid())
  drive   DonationDrive @relation(fields: [driveId], references: [id])
  driveId String

  fileUrl    String
  uploadedAt DateTime @default(now())
}
